#Словарь средних КПД для различных типов различных приборов
appliance = {
    'Чайник' : {
        'Стеклянный' : 0.9,
        'Пластмассовый' : 0.95,
        'Стальной' : 0.8
    },
    'Лампочка' : {
        'Лампа накаливания' : 0.1,
        'Энергосберегающая лампа' : 0.9,
        'Светодиодная лампа' : 0.95
    },
    'Компьютер' : {
        'Любой' : 0.95
    },
    'Телевизор' : {
        'Любой' : 0.95
    },
    'Зарядка' : {
        'Любая' : 0.95
    },
    'Принтер' : {
        'Любой' : 0.95
    },
    'Холодильник' : {
        'Любой' : 0.95
    },
    'Микроволновая печь' : {
        'Любая' : 0.95
    },
    'Духовая печь' : {
        'Любая' : 0.95
    },
    'Индукционная плита' : {
        'Любая' : 0.95
    },
    'Утюг' : {
        'Любой' : 0.95
    },
    'Стиральная машина' : {
        'Любая' : 0.95
    },
    'Сушильная машина' : {
        'Любая' : 0.95
    },
    'Вентмашина' : {
        'Любая' : 0.95
    },
    'Обогреватель' : {
        'Любой' : 0.95
    },
    'Электрический котёл' : {
        'Любой' : 0.95
    },
    'Пылесос' : {
        'Подключаемый' : 0.95,
        'Заряжаемый' : 0.9
    }
}

#Словарь стандартных значений коэффициента φ (фи) для различных электроприборов
fi = {
    'Чайник' : 1,
    'Лампочка' : 0.95,
    'Компьютер' : 0.95,
    'Телевизор' : 1,
    'Зарядка' : 1,
    'Принтер' : 1,
    'Холодильник' : 0.95,
    'Микроволновая печь' : 1,
    'Духовая печь' : 1,
    'Индукционная плита' : 1,
    'Утюг' : 1,
    'Стиральная машина' : 0.9,
    'Сушильная машина' : 1,
    'Вентмашина' : 1,
    'Обогреватель' : 1,
    'Электрический котёл' : 1,
    'Пылесос' : 0.9
}

#Словарь стандартных значений для различных проводов
standart_values = {'P': {'Cu': {220: {0.50: 1300, 0.75: 2200, 1.00: 3100, 1.50: 3300, 2.00: 4200, 
                                      2.50: 4600, 4.00: 5900, 6.00: 7500, 10.0: 11000}, 
                                380: {0.50: 2300, 0.75: 3800, 1.00: 5300, 1.50: 5700, 2.00: 7200, 
                                      2.50: 8000, 4.00: 10300, 6.00: 12900, 10.0: 19000}},
                        
                         'Al': {220: {1.50: 2200, 2.00: 3100, 2.50: 3500, 
                                      4.00: 4600, 6.00: 5700, 10.0: 8400}, 
                                380: {1.50: 3800, 2.00: 5300, 2.50: 6100, 
                                      4.00: 8000, 6.00: 9900, 10.0: 14400}}},
                   'ro': {'Cu': 1.68 * 10 ** (- 8),
                          'Al': 2.7 * 10 ** (-8)}}

#Заполняемый в процессе вычислений список данных
values = []

#
def start() -> None:
    try:
        with open('settings.txt', 'r', encoding='utf-8') as settings:                                                                                                               #Открытие файла settings.txt для чтения в кодировке utf-8. Теперь к этому файлу в пределах действия ключевого слова with можно обращаться settings
            global values                                                                                                                                                           #Далее будет исползоваться глобальная переменная values
            Material, U, S = settings.readline()[:2], int(settings.readline()[:3]), float(settings.readline()[:4])                                                                  #Парсинг () данных из фалйа в переменные
            values = {'p': standart_values['P'][Material][U][S], 'U': U, 'S': S, 'ro': standart_values['ro'][Material], 'Money': float(settings.readline()[:4]) / (3600 * 1000)}    #
            #Мне необходимы действия / 1_000 * 3600, так как параметр "money" считается по киловатт-часам          
    except FileNotFoundError:                                                                                                                                                       #
        pass                                                                                                                                                                        #

#Функция, собирающая результаты вычислений других функций воедино
def resulting(appliance_name:str, power:float, time:float, number:int, n:float, l:float) -> list[float, float]:
    return [round(loss_counting(appliance_name, power, time, number, values['Money'], n, l), 2), round(money_counting(power, time, number, values['Money']), 2)]

#Функция, вычисляющая 
def loss_counting(appliance_name:str, power:float, time:float, number:int, money:float, n:float, l:float) -> float:
    power_loss = (2 * (values['p'] ** 2) * values['ro'] * l) / ((values['U'] ** 2) * (values['S'] * 10 ** (-6)) * (fi[appliance_name] ** 2)) * time
    n_loss = (1 - n) * power * number * time
    return (power_loss + n_loss) * money

#Функция, возвращающая потери в денежном эквиваленте
def money_counting(power:float, time:float, number:int, money:float) -> float:
    return (power * time * money * number)